    1  sudo swapoff -a
    2  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

    3  sudo modprobe overlay
    4  sudo modprobe br_netfilter 
    5  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

    6  sudo sysctl --system
    7  lsmod | grep br_netfilter
    8  lsmod | grep overlay
    9  sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
   10  cat /proc/sys/net/ipv4/ip_forward
   11  wget https://github.com/containerd/containerd/releases/download/v2.1.3/containerd-2.1.3-linux-amd64.tar.gz
   12  sudo tar Cxzvf /usr/local containerd-2.1.3-linux-amd64.tar.gz 
   13  sudo vim /etc/systemd/system/containerd.service
   14  sudo systemctl daemon-reload 
   15  sudo systemctl start containerd.service 
   16  sudo systemctl enable --now containerd.service 
   17  sudo systemctl status containerd.service 
   18  containerd config default > config.toml
   19  cd /etc/
   20  sudo mkdir containerd
   21  cd
   22  vim config.toml 
   23  wget https://github.com/opencontainers/runc/releases/download/v1.3.0/runc.amd64
   24  sudo install -m 755 runc.amd64 /usr/local/sbin/runc
   25  wget https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz
   26  sudo mkdir -p /opt/cni/bin
   27  sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.7.1.tgz 
   28  vim config.toml 
   29  containerd config default | sudo tee /etc/containerd/config.toml
   30  sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
   31  grep -r "SystemdCgroup" /etc/containerd/
   32  grep  "SystemdCgroup" /etc/containerd/
   33  grep  "SystemdCgroup" /etc/containerd/config.toml 
   34  vim /etc/containerd/config.toml 
   35  sudo apt-get update
   36  sudo systemctl restart containerd
   37  sudo containerd config default | sudo tee /etc/containerd/config.toml
   38  service containerd status
   39  sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
   40  sudo systemctl restart containerd
   41  sudo ctr images pull docker.io/library/redis:alpine
   42  sudo ctr run docker.io/library/redis:alpine redis
   43  sudo ctr ls
   44  sudo ctr c ls
   45  sudo ctr c rm redis
   46  sudo ctr images rm docker.io/library/redis:alpine
   47  sudo apt-get update
   48  sudo apt-get install -y apt-transport-https ca-certificates curl gpg
   49  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   50  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   51  sudo apt-get update
   52  sudo apt-get install -y kubelet kubeadm kubectl
   53  sudo apt-mark hold kubelet kubeadm kubectl
   54  kubeadm version
   55  service kubelet status
   56  sudo vim /etc/containerd/config.toml 
   57  sudo systemctl restart containerd
   58  service kubelet status
   59  sudo systemctl status containerd.service 
   60  sudo service kubelet restart
   61  sudo service kubelet status
   62  journalctl -n 200
   63  journalctl -xeu kubelet.service
   64  sudo kubeadm init
   65  mkdir -p $HOME/.kube
   66  kubectl get pod -A
   67  sudo service kubelet restart
   68  sudo service kubelet status
   69  history
   70  kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
   71  kubectl get pod -A
   72  kubectl get nodes
   73  history > history





   [plugins.'io.containerd.cri.v1.runtime'.containerd.runtimes.runc.options]
            BinaryName = ''
            CriuImagePath = ''
            CriuWorkPath = ''
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            Root = ''
            ShimCgroup = ''
            SystemdCgroup = true
            

https://mrmaheshrajput.medium.com/deploy-kubernetes-cluster-on-aws-ec2-instances-f3eeca9e95f1

sed -i "/ShimCgroup = ''/a \            SystemdCgroup = true" history 

kubectl label node ip-172-31-2-53 node-role.kubernetes.io/worker=worker

kubectl create deployment nginx --image=nginx

kubectl expose deployment nginx --port=80 --type=NodePort


curl 3.239.224.235:NodePort
